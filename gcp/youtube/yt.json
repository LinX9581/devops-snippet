playlistItems {
    "resource": "playlistItems",
    "rest": "list",
    "json": {
        "part": ["id", "snippet", "contentDetails"],
        "playlistId": "PLmz6Vrm4YVOVT_RSnxZjE_Ev6bNu8TklE",
        "maxResults": "50"
    }
}

search {
    "resource": "search",
    "rest": "list",
    "json": {
        "part": [
            "snippet"
        ],
        "forMine": true,
        "maxResults": 25,
        "type": [
            "video"
        ]
    }
}

update {
    "resource": "videos",
    "rest": "update",
    "part": ["id", "snippet", "status"],
    "json": {
        "id": "2Dr3ud7jjS0",
        "snippet": {
            "title": "private",
            "description": "private",
            "categoryId": "23"
        },
        "status": {
            "privacyStatus": "private",
        },
    },
}

upload
const nowStr = new Date().getTime().toString(36).substring(0, 4);
const fileName = '/var/www/office.mp4'
const fileSize = fs.statSync(fileName).size; {
    "resource": "videos",
    "rest": "insert",
    "part": ["id", "snippet", "status", "contentDetails"],
    "json": {
        "snippet": {
            "channelId": "UCP7vUHlfpivxiGRT4uOWi2g",
            "title": "your-video-${nowStr}",
            "description": "測試上傳影片"
        },
        "status": {
            "privacyStatus": "private",
        },
    },
    "media": {
        "body": fs.createReadStream(fileName),
    },
}, {
    // Use the `onUploadProgress` event from Axios to track the
    // number of bytes uploaded to this point.
    onUploadProgress: evt => {
        const progress = (evt.bytesRead / fileSize) * 100;
        console.log(`${Math.round(progress)}% complete`); // 顯示目前上傳進度 
    },
}